#!/bin/bash
# When run on a brand new server, this script follows all instructions of the
# book in turn. Useful for getting the server up to a point and continuing to
# write the book afterwards, then destroying the server, retrying, and so on.
# The script is manually written and maintained, i.e. copied and pasted from
# the book. It isn't smart enough to know when the scripts in the book have
# changed.

set -e

source /root/django_deployment_vars

DJANGO_USER=$DJANGO_PROJECT
DJANGO_GROUP=$DJANGO_PROJECT
if [ $PYTHON = "3" ]; then
	PYTHON_EXECUTABLE=/usr/bin/python3
else
	PYTHON_EXECUTABLE=/usr/bin/python
fi

# Update and install stuff (TODO: put it in the book)
apt-get update
apt-get -y upgrade
apt-get install -y git python3 virtualenvwrapper

#
# USERS AND DIRECTORIES
#


# Creating a user and group
if ! getent passwd $DJANGO_PROJECT; then
	adduser --system --home=/var/opt/$DJANGO_PROJECT \
		--no-create-home --disabled-password --group \
		--shell=/bin/bash $DJANGO_USER
fi

# The program files
cd /opt
[ -d $DJANGO_PROJECT/.git ] || git clone $DJANGO_PROJECT_REPOSITORY
[ -d $DJANGO_PROJECT/venv ] \
	|| virtualenv --system-site-packages --python=$PYTHON_EXECUTABLE \
		/opt/$DJANGO_PROJECT/venv
/opt/$DJANGO_PROJECT/venv/bin/pip install \
	-r /opt/$DJANGO_PROJECT/requirements.txt
/opt/$DJANGO_PROJECT/venv/bin/python -m compileall \
	-x /opt/$DJANGO_PROJECT/venv/ /opt/$DJANGO_PROJECT

# The data directory
mkdir -p /var/opt/$DJANGO_PROJECT
chown $DJANGO_USER /var/opt/$DJANGO_PROJECT

# The log directory
mkdir -p /var/log/$DJANGO_PROJECT
chown $DJANGO_USER /var/log/$DJANGO_PROJECT

# The production settings
mkdir -p /etc/opt/$DJANGO_PROJECT
cat <<-EOF1 >/etc/opt/$DJANGO_PROJECT/settings.py
	from $DJANGO_PROJECT.settings.base import *

	DEBUG = True
	ALLOWED_HOSTS = ['$DOMAIN', 'www.$DOMAIN']
	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.sqlite3',
	        'NAME': '/var/opt/$DJANGO_PROJECT/$DJANGO_PROJECT.db',
	    }
	}
EOF1
chgrp $DJANGO_GROUP /etc/opt/$DJANGO_PROJECT/settings.py
chmod u=rw,g=r,o= /etc/opt/$DJANGO_PROJECT/settings.py
/opt/$DJANGO_PROJECT/venv/bin/python -m compileall \
	/etc/opt/$DJANGO_PROJECT
if [ $PYTHON = "2" ]; then
	chgrp -R $DJANGO_GROUP /etc/opt/$DJANGO_PROJECT/settings.pyc
else
	chgrp -R $DJANGO_GROUP /etc/opt/$DJANGO_PROJECT/__pycache__
fi

#
# THE WEB SERVER
#

if [ $WEB_SERVER = 'nginx' ]; then
	# Installing nginx
	apt-get install -y nginx-light

	# Configuring nginx to serve the domain
	cat <<-EOF1 >/etc/nginx/sites-available/$DOMAIN
		server {
		    listen 80;
		    listen [::]:80;
		    server_name $DOMAIN www.$DOMAIN;
		    root /var/www/$DOMAIN;
		}
	EOF1
	cd /etc/nginx/sites-enabled
	[ -e $DOMAIN ] \
		|| ln -s ../sites-available/$DOMAIN .
	service nginx reload
	mkdir -p /var/www/$DOMAIN
	echo "<p>This is the web site for $DOMAIN.</p>" \
		>/var/www/$DOMAIN/index.html
	cat <<-EOF1 >/etc/nginx/sites-available/default
		server {
		    listen 80 default_server;
		    listen [::]:80 default_server;
		    return 404;
		}
	EOF1
	service nginx reload

	# Configuring nginx for django
	cat <<-EOF1 >/etc/nginx/sites-available/$DOMAIN
		server {
		    listen 80;
		    listen [::]:80;
		    server_name $DOMAIN www.$DOMAIN;
		    root /var/www/$DOMAIN;
		    location / {
		        proxy_pass http://localhost:8000;
		        proxy_set_header Host \$http_host;
		        proxy_redirect off;
		        proxy_set_header X-Forwarded-For \$remote_addr;
		        proxy_set_header X-Forwarded-Proto \$scheme;
		        proxy_connect_timeout 10;
		        proxy_read_timeout 30;
		        client_max_body_size 20m;
		    }
		}
	EOF1
	service nginx reload
else
	# Installing apache
	apt-get install -y apache2

	# Configuring apache to serve the domain
	cat <<-EOF1 >/etc/apache2/sites-available/$DOMAIN.conf
		<VirtualHost *:80>
		    ServerName $DOMAIN
		    ServerAlias www.$DOMAIN
		    DocumentRoot /var/www/$DOMAIN
		</VirtualHost>
	EOF1
	cd /etc/apache2/sites-enabled
	[ -e $DOMAIN.conf ] \
		|| ln -s ../sites-available/$DOMAIN.conf .
	service apache2 reload
	mkdir -p /var/www/$DOMAIN
    
	echo '<p>This is the web site for $DOMAIN.</p>' \
	    >/var/www/$DOMAIN/index.html
	cat <<-EOF1 >/etc/apache2/sites-available/000-default.conf
		<VirtualHost *:80>
		    DocumentRoot /var/www/html
		    Redirect 404 /
		</VirtualHost>
	EOF1
	service apache2 reload

	# Configuring apache for django
	cat <<-EOF1 >/etc/apache2/sites-available/$DOMAIN.conf
		<VirtualHost *:80>
		    ServerName $DOMAIN
		    ServerAlias www.$DOMAIN
		    DocumentRoot /var/www/$DOMAIN
		    ProxyPass / http://localhost:8000/
		    ProxyPreserveHost On
		    RequestHeader set X-Forwarded-Proto "http"
		</VirtualHost>
	EOF1
	a2enmod proxy proxy_http headers
	service apache2 reload
fi

#
# STATIC AND MEDIA FILES
#

# Setting up Django
cat <<-EOF1 >/etc/opt/$DJANGO_PROJECT/settings.py
	from $DJANGO_PROJECT.settings.base import *

	DEBUG = True
	ALLOWED_HOSTS = ['$DOMAIN', 'www.$DOMAIN']
	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.sqlite3',
	        'NAME': '/var/opt/$DJANGO_PROJECT/$DJANGO_PROJECT.db',
	    }
	}
	STATIC_ROOT = '/var/cache/$DJANGO_PROJECT/static/'
	STATIC_URL = '/static/'
EOF1
/opt/$DJANGO_PROJECT/venv/bin/python -m compileall \
	/etc/opt/$DJANGO_PROJECT
if [ $PYTHON = "2" ]; then
	chgrp -R $DJANGO_GROUP /etc/opt/$DJANGO_PROJECT/settings.pyc
else
	chgrp -R $DJANGO_GROUP /etc/opt/$DJANGO_PROJECT/__pycache__
fi
mkdir -p /var/cache/$DJANGO_PROJECT/static
PYTHONPATH=/etc/opt/$DJANGO_PROJECT:/opt/$DJANGO_PROJECT \
	/opt/$DJANGO_PROJECT/venv/bin/python \
	/opt/$DJANGO_PROJECT/manage.py collectstatic \
	--settings=settings --noinput
if [ $WEB_SERVER = 'nginx' ]; then
	# Setting up nginx
	cat <<-EOF1 >/etc/nginx/sites-available/$DOMAIN
		server {
		    listen 80;
		    listen [::]:80;
		    server_name $DOMAIN www.$DOMAIN;
		    root /var/www/$DOMAIN;
		    location / {
		        proxy_pass http://localhost:8000;
		        proxy_set_header Host \$http_host;
		        proxy_redirect off;
		        proxy_set_header X-Forwarded-For \$remote_addr;
		        proxy_set_header X-Forwarded-Proto \$scheme;
		        client_max_body_size 20m;
		    }
		    location /static/ {
		        alias /var/cache/$DJANGO_PROJECT/static/;
		    }
		}
	EOF1
	service nginx reload
else
	# Setting up apache
	cat <<-EOF1 >/etc/apache2/sites-available/$DOMAIN.conf``
		<VirtualHost *:80>
		    ServerName $DOMAIN
		    ServerAlias www.$DOMAIN
		    DocumentRoot /var/www/$DOMAIN
		    ProxyPass /static !
		    ProxyPass / http://localhost:8000/
		    ProxyPreserveHost On
		    RequestHeader set X-Forwarded-Proto "http"
		    Alias /static/ /var/cache/$DJANGO_PROJECT/static/
		    <Directory /var/cache/$DJANGO_PROJECT/static/>
		        Require all granted
		    </Directory>
		</VirtualHost>
	EOF1
	service apache2 reload
fi

#
# GUNICORN
#

/opt/$DJANGO_PROJECT/venv/bin/pip install gunicorn gevent
cat <<-EOF1 >/etc/systemd/system/$DJANGO_PROJECT.service
	[Unit]
	Description=$DJANGO_PROJECT

	[Service]
	User=$DJANGO_USER
	Group=$DJANGO_GROUP
	Environment="PYTHONPATH=/etc/opt/$DJANGO_PROJECT:/opt/$DJANGO_PROJECT"
	Environment="DJANGO_SETTINGS_MODULE=settings"
	ExecStart=/opt/$DJANGO_PROJECT/venv/bin/gunicorn \
	    --worker-class=gevent --workers=1 \
	    --log-file=/var/log/$DJANGO_PROJECT/gunicorn.log \
	    --bind=127.0.0.1:8000 --bind=[::1]:8000 \
	    $DJANGO_PROJECT.wsgi:application

	[Install]
	WantedBy=multi-user.target
EOF1
systemctl enable $DJANGO_PROJECT
service $DJANGO_PROJECT start

#
# SETTINGS
#

# Email
cat <<-EOF1 >>/etc/opt/$DJANGO_PROJECT/settings.py
	SERVER_EMAIL = 'noreply@$DOMAIN'
	DEFAULT_FROM_EMAIL = 'noreply@$DOMAIN'
	ADMINS = [
	    ('$ADMIN_NAME', '$ADMIN_EMAIL_ADDRESS'),
	]
	MANAGERS = ADMINS

	EMAIL_HOST = '$EMAIL_HOST'
	EMAIL_HOST_USER = '$EMAIL_HOST_USER'
	EMAIL_HOST_PASSWORD = '$EMAIL_HOST_PASSWORD'
	EMAIL_PORT = 587
	EMAIL_USE_TLS = True

	DEBUG = False
EOF1
/opt/$DJANGO_PROJECT/venv/bin/python -m compileall \
	/etc/opt/$DJANGO_PROJECT
service $DJANGO_PROJECT restart
